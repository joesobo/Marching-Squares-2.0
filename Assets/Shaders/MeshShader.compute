#pragma kernel CSMain

CGPROGRAM

#include "MarchingHelper.cginc"

ENDCG

struct Triangle {
  float2 vertexA;
  float2 vertexB;
  float2 vertexC;
  float red;
  float green;
  float blue;
};

struct Color {
  float red;
  float green;
  float blue;
};

AppendStructuredBuffer<Triangle> _Triangles;
RWStructuredBuffer<int> _States;
uint _VoxelResolution;
uint _ChunkResolution;
float _Res;
float _ResLen;
float2 _Offset;

int indexFromCoord(int x, int y) {
  return y * _VoxelResolution + x + y;
}

void addTriangle(float2 aMidpoint, float2 bMidpoint, float2 cMidpoint, Color col) {
  Triangle tri;
  tri.vertexA = aMidpoint;
  tri.vertexB = bMidpoint;
  tri.vertexC = cMidpoint;
  tri.red = col.red;
  tri.green = col.green;
  tri.blue = col.blue;
  _Triangles.Append(tri);
}

bool isMultiMaterial(int cornerStates[4]) {
  float aState = cornerStates[0];
  float bState = cornerStates[1];
  float cState = cornerStates[2];
  float dState = cornerStates[3];

  if (aState == 0 && bState == 0 && cState == 0 && dState == 0) {
    return false;
  }

  float value = aState > 0 ? aState : bState > 0 ? bState : cState > 0 ? cState : dState;
  if ((aState == value || aState == 0) && (bState == value || bState == 0) && (cState == value || cState == 0) && (dState == value || dState == 0)) {
    return false;
  }

  return true;
}

Color colorByState(float state) {
  Color col;
  col.red = 255 - state;
  col.blue = 0;
  col.green = 0;

  return col;
}

void GetCornerStates(float2 uv, out int cornerStates[4]) {
  cornerStates[0] = _States[indexFromCoord(uv.x, uv.y)];
  cornerStates[1] = _States[indexFromCoord(uv.x + 1, uv.y)];
  cornerStates[2] = _States[indexFromCoord(uv.x + 1, uv.y + 1)];
  cornerStates[3] = _States[indexFromCoord(uv.x, uv.y + 1)];
}

void GetColors(int cornerStates[4], out Color colors[4]) {
  colors[0] = colorByState(cornerStates[0]);
  colors[1] = colorByState(cornerStates[1]);
  colors[2] = colorByState(cornerStates[2]);
  colors[3] = colorByState(cornerStates[3]);
}

int GetCellType(int cornerStates[4]) {
  int cellType = 0;
  float aState = cornerStates[0];
  float bState = cornerStates[1];
  float cState = cornerStates[2];
  float dState = cornerStates[3];

  if (aState > 0) cellType |= 1;
  if (bState > 0) cellType |= 2;
  if (cState > 0) cellType |= 4;
  if (dState > 0) cellType |= 8;

  // Check multi-material cell states
  if(cellType >= 15) {
    if (aState != bState && aState != cState && aState != dState && bState == cState && bState == dState) {
      cellType = 16;
    }
    else if (bState != aState && bState != cState && bState != dState && aState == cState && aState == dState) {
      cellType = 17;
    }
    else if (cState != dState && cState != aState && cState != bState && aState == bState && aState == dState) {
      cellType = 18;
    }
    else if (dState != aState && dState != bState && dState != cState && aState == bState && aState == cState) {
      cellType = 19;
    }
    else if (aState != bState && cState != bState && bState == dState) {
      cellType = 20;
    }
    else if (bState != aState && dState != aState && aState == cState) {
      cellType = 21;
    }
  }

  return cellType;
}

void GetCorners(float2 uv, out float2 corners[4]) {
  corners[0] = float2(uv) / _Res;
  corners[1] = float2(uv.x + 1, uv.y) / _Res;
  corners[2] = float2(uv.x + 1, uv.y + 1) / _Res;
  corners[3] = float2(uv.x, uv.y + 1) / _Res;
}

void GetMidpoints(float2 uv, float2 corners[4], out float2 midpoints[4]) {
  float2 aCorner = corners[0];
  float2 bCorner = corners[1];
  float2 cCorner = corners[2];
  float2 dCorner = corners[3];

  midpoints[0] = float2(aCorner.x + _ResLen * 0.5, aCorner.y) + _Offset;
  midpoints[1] = float2(aCorner.x + _ResLen, aCorner.y + _ResLen * 0.5) + _Offset;
  midpoints[2] = float2(aCorner.x + _ResLen * 0.5, aCorner.y + _ResLen) + _Offset;
  midpoints[3] = float2(aCorner.x, aCorner.y + _ResLen * 0.5) + _Offset;
}

void GetInnerpoints(float2 uv, float2 corners[4], out float2 innerpoints[4]) {
  float2 aCorner = corners[0];
  float2 bCorner = corners[1];
  float2 cCorner = corners[2];
  float2 dCorner = corners[3];

  innerpoints[0] = float2(aCorner.x + _ResLen * 0.25, aCorner.y + _ResLen * 0.25) + _Offset;
  innerpoints[1] = float2(aCorner.x + _ResLen * 0.75, aCorner.y + _ResLen * 0.25) + _Offset;
  innerpoints[2] = float2(aCorner.x + _ResLen * 0.75, aCorner.y + _ResLen * 0.75) + _Offset;
  innerpoints[3] = float2(aCorner.x + _ResLen * 0.25, aCorner.y + _ResLen * 0.75) + _Offset;
}

void TriangulateMultiMaterial(int cellType, float2 corners[4], float2 midpoints[4], float2 innerpoints[4], Color colors[4], float2 center) {
  float2 aCorner = corners[0];
  float2 bCorner = corners[1];
  float2 cCorner = corners[2];
  float2 dCorner = corners[3];

  float2 aMidpoint = midpoints[0];
  float2 bMidpoint = midpoints[1];
  float2 cMidpoint = midpoints[2];
  float2 dMidpoint = midpoints[3];

  float2 aInner = innerpoints[0];
  float2 bInner = innerpoints[1];
  float2 cInner = innerpoints[2];
  float2 dInner = innerpoints[3];

  Color aColor = colors[0];
  Color bColor = colors[1];
  Color cColor = colors[2];
  Color dColor = colors[3];

  switch (cellType) {
    case 1:
      addTriangle(aMidpoint, aCorner, dMidpoint, aColor);
      break;
    case 2:
      addTriangle(bMidpoint, bCorner, aMidpoint, bColor);
      break;
    case 3:
      addTriangle(aCorner, dMidpoint, center, aColor);
      addTriangle(aCorner, center, aMidpoint, aColor);
      addTriangle(aMidpoint, center, bCorner, bColor);
      addTriangle(center, bMidpoint, bCorner, bColor);
      break;
    case 4:
      addTriangle(cMidpoint, cCorner, bMidpoint, cColor);
      break;
    case 5:
      addTriangle(aMidpoint, aCorner, dMidpoint, aColor);
      addTriangle(cMidpoint, cCorner, bMidpoint, cColor);
      break;
    case 6:
      addTriangle(bCorner, aMidpoint, center, bColor);
      addTriangle(center, bMidpoint, bCorner, bColor);
      addTriangle(bMidpoint, center, cMidpoint, cColor);
      addTriangle(cMidpoint, cCorner, bMidpoint, cColor);
      break;
    case 7:
      addTriangle(aCorner, dMidpoint, aMidpoint, aColor);
      addTriangle(dMidpoint, center, aMidpoint, aColor);
      addTriangle(dMidpoint, dInner, center, aColor);
      addTriangle(bCorner, aMidpoint, center, bColor);
      addTriangle(bCorner, center, bMidpoint, bColor);
      addTriangle(bMidpoint, center, cMidpoint, cColor);
      addTriangle(bMidpoint, cMidpoint, cCorner, cColor);
      addTriangle(center, dInner, cMidpoint, cColor);
      break;
    case 8:
      addTriangle(cMidpoint, dMidpoint, dCorner, dColor);
      break;
    case 9:
      addTriangle(aCorner, center, aMidpoint, aColor);
      addTriangle(center, aCorner, dMidpoint, aColor);
      addTriangle(center, dMidpoint, cMidpoint, dColor);
      addTriangle(dMidpoint, dCorner, cMidpoint, dColor);
      break;
    case 10:
      addTriangle(bMidpoint, bCorner, aMidpoint, bColor);
      addTriangle(cMidpoint, dMidpoint, dCorner, dColor);
      break;
    case 11:
      addTriangle(aMidpoint, aCorner, dMidpoint, aColor);
      addTriangle(aMidpoint, dMidpoint, center, aColor);
      addTriangle(bCorner, aMidpoint, center, bColor);
      addTriangle(bCorner, center, bMidpoint, bColor);
      addTriangle(bMidpoint, center, cInner, bColor);
      addTriangle(center, dMidpoint, dCorner, dColor);
      addTriangle(center, dCorner, cMidpoint, dColor);
      addTriangle(center, cMidpoint, cInner, dColor);
      break;
    case 12:
      addTriangle(bMidpoint, center, cCorner, cColor);
      addTriangle(cCorner, center, cMidpoint, cColor);
      addTriangle(cMidpoint, center, dMidpoint, dColor);
      addTriangle(dMidpoint, dCorner, cMidpoint, dColor);
      break;
    case 13:
      addTriangle(aMidpoint, aCorner, dMidpoint, aColor);
      addTriangle(aMidpoint, dMidpoint, center, aColor);
      addTriangle(aMidpoint, center, bInner, aColor);
      addTriangle(bInner, center, bMidpoint, cColor);
      addTriangle(bMidpoint, center, cMidpoint, cColor);
      addTriangle(bMidpoint, cMidpoint, cCorner, cColor);
      addTriangle(center, dMidpoint, dCorner, dColor);
      addTriangle(center, dCorner, cMidpoint, dColor);
      break;
    case 14:
      addTriangle(aInner, center, aMidpoint, bColor);
      addTriangle(bCorner, aMidpoint, center, bColor);
      addTriangle(bCorner, center, bMidpoint, bColor);
      addTriangle(bMidpoint, center, cMidpoint, cColor);
      addTriangle(bMidpoint, cMidpoint, cCorner, cColor);
      addTriangle(center, dMidpoint, dCorner, dColor);
      addTriangle(center, dCorner, cMidpoint, dColor);
      addTriangle(center, aInner, dMidpoint, dColor);
      break;
    case 15:
      addTriangle(aCorner, center, aMidpoint, aColor);
      addTriangle(aCorner, dMidpoint, center, aColor);
      addTriangle(aMidpoint, bMidpoint, bCorner, bColor);
      addTriangle(aMidpoint, center, bMidpoint, bColor);
      addTriangle(center, cCorner, bMidpoint, cColor);
      addTriangle(center, cMidpoint, cCorner, cColor);
      addTriangle(dMidpoint, cMidpoint, center, dColor);
      addTriangle(dMidpoint, dCorner, cMidpoint, dColor);
      break;
    case 16:
      addTriangle(aCorner, dMidpoint, aMidpoint, aColor);
      addTriangle(aMidpoint, dMidpoint, center, bColor);
      addTriangle(aMidpoint, bMidpoint, bCorner, bColor);
      addTriangle(aMidpoint, center, bMidpoint, bColor);
      addTriangle(center, cCorner, bMidpoint, cColor);
      addTriangle(center, cMidpoint, cCorner, cColor);
      addTriangle(dMidpoint, cMidpoint, center, dColor);
      addTriangle(dMidpoint, dCorner, cMidpoint, dColor);
      break;
    case 17:
      addTriangle(aCorner, center, aMidpoint, aColor);
      addTriangle(aCorner, dMidpoint, center, aColor);
      addTriangle(aMidpoint, bMidpoint, bCorner, bColor);
      addTriangle(aMidpoint, center, bMidpoint, aColor);
      addTriangle(center, cCorner, bMidpoint, cColor);
      addTriangle(center, cMidpoint, cCorner, cColor);
      addTriangle(dMidpoint, cMidpoint, center, dColor);
      addTriangle(dMidpoint, dCorner, cMidpoint, dColor);
      break;
    case 18:
      addTriangle(aCorner, center, aMidpoint, aColor);
      addTriangle(aCorner, dMidpoint, center, aColor);
      addTriangle(aMidpoint, bMidpoint, bCorner, bColor);
      addTriangle(aMidpoint, center, bMidpoint, bColor);
      addTriangle(bMidpoint, center, cMidpoint, aColor);
      addTriangle(bMidpoint, cMidpoint, cCorner, cColor);
      addTriangle(dMidpoint, cMidpoint, center, dColor);
      addTriangle(dMidpoint, dCorner, cMidpoint, dColor);
      break;
    case 19:
      addTriangle(aCorner, center, aMidpoint, aColor);
      addTriangle(aCorner, dMidpoint, center, aColor);
      addTriangle(aMidpoint, bMidpoint, bCorner, bColor);
      addTriangle(aMidpoint, center, bMidpoint, bColor);
      addTriangle(center, cCorner, bMidpoint, cColor);
      addTriangle(center, cMidpoint, cCorner, cColor);
      addTriangle(dMidpoint, cMidpoint, center, aColor);
      addTriangle(dMidpoint, dCorner, cMidpoint, dColor);
      break;
    case 20:
      addTriangle(aCorner, dMidpoint, aMidpoint, aColor);
      addTriangle(aMidpoint, dMidpoint, center, bColor);
      addTriangle(aMidpoint, bMidpoint, bCorner, bColor);
      addTriangle(aMidpoint, center, bMidpoint, bColor);
      addTriangle(bMidpoint, center, cMidpoint, bColor);
      addTriangle(bMidpoint, cMidpoint, cCorner, cColor);
      addTriangle(dMidpoint, cMidpoint, center, dColor);
      addTriangle(dMidpoint, dCorner, cMidpoint, dColor);
      break;
    case 21:
      addTriangle(aCorner, center, aMidpoint, aColor);
      addTriangle(aCorner, dMidpoint, center, aColor);
      addTriangle(aMidpoint, bMidpoint, bCorner, bColor);
      addTriangle(aMidpoint, center, bMidpoint, cColor);
      addTriangle(center, cCorner, bMidpoint, cColor);
      addTriangle(center, cMidpoint, cCorner, cColor);
      addTriangle(dMidpoint, cMidpoint, center, cColor);
      addTriangle(dMidpoint, dCorner, cMidpoint, dColor);
      break;
  }
}

void TriangulateNormal(int cellType, float2 corners[4], float2 midpoints[4], Color colors[4]) {
  float2 aCorner = corners[0];
  float2 bCorner = corners[1];
  float2 cCorner = corners[2];
  float2 dCorner = corners[3];

  float2 aMidpoint = midpoints[0];
  float2 bMidpoint = midpoints[1];
  float2 cMidpoint = midpoints[2];
  float2 dMidpoint = midpoints[3];

  Color aColor = colors[0];
  Color bColor = colors[1];
  Color cColor = colors[2];
  Color dColor = colors[3];

  switch (cellType) {
    case 1:
      addTriangle(dMidpoint, aMidpoint, aCorner, aColor);
      break;
    case 2:
      addTriangle(aMidpoint, bMidpoint, bCorner, bColor);
      break;
    case 3:
      addTriangle(bCorner, aCorner, dMidpoint, aColor);
      addTriangle(dMidpoint, bMidpoint, bCorner, bColor);
      break;
    case 4:
      addTriangle(cCorner, bMidpoint, cMidpoint, cColor);
      break;
    case 5:
      addTriangle(dMidpoint, aMidpoint, aCorner, aColor);
      addTriangle(bMidpoint, cMidpoint, cCorner, cColor);
      break;
    case 6:
      addTriangle(cMidpoint, cCorner, bCorner, cColor);
      addTriangle(bCorner, aMidpoint, cMidpoint, bColor);
      break;
    case 7:
      addTriangle(bCorner, aCorner, dMidpoint, aColor);
      addTriangle(dMidpoint, cMidpoint, bCorner, bColor);
      addTriangle(cMidpoint, cCorner, bCorner, cColor);
      break;
    case 8:
      addTriangle(cMidpoint, dMidpoint, dCorner, dColor);
      break;
    case 9:
      addTriangle(aCorner, dCorner, cMidpoint, dColor);
      addTriangle(cMidpoint, aMidpoint, aCorner, aColor);
      break;
    case 10:
      addTriangle(bCorner, aMidpoint, bMidpoint, bColor);
      addTriangle(cMidpoint, dMidpoint, dCorner, dColor);
      break;
    case 11:
      addTriangle(bMidpoint, bCorner, aCorner, bColor);
      addTriangle(aCorner, cMidpoint, bMidpoint, aColor);
      addTriangle(aCorner, dCorner, cMidpoint, dColor);
      break;
    case 12:
      addTriangle(dMidpoint, dCorner, cCorner, dColor);
      addTriangle(cCorner, bMidpoint, dMidpoint, cColor);
      break;
    case 13:
      addTriangle(aMidpoint, aCorner, dCorner, aColor);
      addTriangle(bMidpoint, aMidpoint, dCorner, dColor);
      addTriangle(dCorner, cCorner, bMidpoint, cColor);
      break;
    case 14:
      addTriangle(dMidpoint, dCorner, cCorner, dColor);
      addTriangle(aMidpoint, dMidpoint, cCorner, cColor);
      addTriangle(cCorner, bCorner, aMidpoint, bColor);
      break;
    case 15:
      addTriangle(cCorner, bCorner, aCorner, bColor);
      addTriangle(aCorner, dCorner, cCorner, dColor);
      break;
  }
}

void TriangulateCellRows(int2 uv) {
  if (uv.x >= _VoxelResolution || uv.y >= _VoxelResolution) return;

  int cornerStates[4];
  GetCornerStates(uv, cornerStates);

  Color colors[4];
  GetColors(cornerStates, colors);

  int cellType = GetCellType(cornerStates);

  float2 corners[4];
  GetCorners(uv, corners);

  float2 midpoints[4];
  GetMidpoints(uv, corners, midpoints);

  float2 innerpoints[4];
  GetInnerpoints(uv, corners, innerpoints);

  float2 center = float2(corners[0].x + _ResLen * 0.5, corners[0].y + _ResLen * 0.5) + _Offset;

  corners[0] += _Offset;
  corners[1] += _Offset;
  corners[2] += _Offset;
  corners[3] += _Offset;

  if (isMultiMaterial(cornerStates)) {
    TriangulateMultiMaterial(cellType, corners, midpoints, innerpoints, colors, center);
  } else {
    TriangulateNormal(cellType, corners, midpoints, colors);
  }
}

[numthreads(8,8,1)]
void CSMain (int3 id : SV_DispatchThreadID) {
  _Res = float(_VoxelResolution * _ChunkResolution);
  _ResLen = (1.0 / _Res);
  _Offset = float2(_ResLen * 0.5, _ResLen * 0.5);

  int2 uv = GetUV(id);
  TriangulateCellRows(uv);
}
